// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Space {
  id                 Int             @id @default(autoincrement())
  name               String
  latitude           Float
  longitude          Float
  startTime          DateTime        @map("start_time")
  serverTime         DateTime        @map("server_time")
  pomodoroDuration   Int             @map("pomodoro_duration")
  shortBreakDuration Int             @map("short_break_duration")
  longBreakDuration  Int             @map("long_break_duration")
  urlVideo           String          @map("url_video")
  urlSpotify         String          @map("url_spotify")
  active             Boolean         @default(true)
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  members            User[]          @relation("space")
  categories         SpaceCategory[] @relation("category")
  timezone           String

  @@map("spaces")
}

model User {
  id             Int             @id @default(autoincrement())
  username       String          @unique
  space          Space?          @relation("space", fields: [spaceId], references: [id])
  spaceId        Int?            @map("space_id")
  friend1        Friendship[]    @relation("friend1")
  friend2        Friendship[]    @relation("friend2")
  sendTo         FriendRequest[] @relation("send")
  receiveFrom    FriendRequest[] @relation("receive")
  categories     UserCategory[]  @relation("category")
  active         Boolean         @default(true)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  authToken      AuthToken?
  authTokenId    Int?            @unique @map("auth_token_id")
  salt           String
  hashedPassword String          @map("hashed_password")

  @@map("users")
}

model Friendship {
  id        Int      @id @default(autoincrement())
  user1     User     @relation("friend1", fields: [user1Id], references: [id])
  user1Id   Int      @map("user1_id")
  user2     User     @relation("friend2", fields: [user2Id], references: [id])
  user2Id   Int      @map("user2_id")
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("friendships")
}

model FriendRequest {
  id         Int                 @id @default(autoincrement())
  sender     User                @relation("send", fields: [senderId], references: [id])
  senderId   Int                 @map("sender_id")
  receiver   User                @relation("receive", fields: [receiverId], references: [id])
  receiverId Int                 @map("receiver_id")
  status     FriendRequestStatus
  active     Boolean             @default(true)
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @updatedAt @map("updated_at")

  @@map("send_requests")
}

model UserCategory {
  id        Int      @id @default(autoincrement())
  user      User     @relation("category", fields: [userId], references: [id])
  userId    Int      @map("user_id")
  category  Category
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_categories")
}

model SpaceCategory {
  id        Int      @id @default(autoincrement())
  space     Space    @relation("category", fields: [spaceId], references: [id])
  spaceId   Int      @map("space_id")
  category  Category
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("space_categories")
}

model AuthToken {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique @map("user_id")
  accessToken  String   @unique @map("access_token")
  refreshToken String   @unique @map("refresh_token")
  expiredTime  DateTime @map("expired_time")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("auth_tokens")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Category {
  TECH
  MUSIC
  TRAVELLING
}
